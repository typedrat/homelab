apiVersion: tf.upbound.io/v1beta1
kind: Workspace
metadata:
    name: authentik
spec:
    providerConfigRef:
        name: authentik
    forProvider:
        source: Inline
        env:
            - name: TF_VAR_discordKey
              secretKeyRef:
                  name: authentik-discord
                  namespace: authentik
                  key: client-id
            - name: TF_VAR_discordSecret
              secretKeyRef:
                  name: authentik-discord
                  namespace: authentik
                  key: client-secret
            - name: TF_VAR_guildId
              secretKeyRef:
                  name: authentik-discord
                  namespace: authentik
                  key: guild-id
            - name: TF_VAR_guildName
              secretKeyRef:
                  name: authentik-discord
                  namespace: authentik
                  key: guild-name
            - name: TF_VAR_userRoleId
              secretKeyRef:
                  name: authentik-discord
                  namespace: authentik
                  key: user-role-id
            - name: TF_VAR_sysopRoleId
              secretKeyRef:
                  name: authentik-discord
                  namespace: authentik
                  key: sysop-role-id
        module: |
            data "authentik_flow" "default-source-authentication" {
                slug = "default-source-authentication"
            }

            resource "authentik_policy_expression" "discord-auth-policy" {
                name       = "discord-auth-policy"
                expression = <<-PYTHON
                from authentik.core.models import Group
                GUILD_API_URL = "https://discord.com/api/users/@me/guilds/${var.guildId}/member"

                # Ensure flow is only run during OAuth logins via Discord
                if context["source"].provider_type != "discord":
                    return True

                # Get the user-source connection object from the context, and get the access token
                connection = context.get("goauthentik.io/sources/connection")
                if not connection:
                    return False
                access_token = connection.access_token

                guild_member_request = requests.get(
                    GUILD_API_URL,
                    headers={
                        "Authorization": f"Bearer {access_token}"
                    },
                )
                guild_member_info = guild_member_request.json()

                # Ensure we are not being ratelimited
                if guild_member_request.status_code == 429:
                    ak_message(f"Discord is throttling this connection. Retry in {int(guild_member_info['retry_after'])}s")
                    return False

                # Ensure user is a member of the guild
                if "code" in guild_member_info:
                    if guild_member_info["code"] == 10004:
                        ak_message("User is not a member of the guild '${var.guildName}'")
                    else:
                        ak_create_event("discord_error", source=context["source"], code=guild_member_info["code"])
                        ak_message("Discord API error, try again later.")
                    return False

                # Get all discord_groups
                discord_groups = Group.objects.filter(attributes__discord_role_id__isnull=False)

                # Split user groups into discord groups and non discord groups
                user_groups_non_discord = request.user.ak_groups.exclude(pk__in=discord_groups.values_list("pk", flat=True))
                user_groups_discord = list(request.user.ak_groups.filter(pk__in=discord_groups.values_list("pk", flat=True)))

                # Filter matching roles based on guild_member_info['roles']
                user_groups_discord_updated = discord_groups.filter(attributes__discord_role_id__in=guild_member_info["roles"])

                # Combine user_groups_non_discord and matching_roles
                user_groups_updated = user_groups_non_discord.union(user_groups_discord_updated)

                # Update user's groups
                request.user.ak_groups.set(user_groups_updated)

                # Create event with roles changed
                ak_create_event(
                    "discord_role_sync",
                    user_discord_roles_before=", ".join(str(group) for group in user_groups_discord),
                    user_discord_roles_after=", ".join(str(group) for group in user_groups_discord_updated),
                )

                return True
                PYTHON
            }

            resource "authentik_policy_binding" "discord-auth-policy-binding" {
                target = authentik_flow.default-source-authentication.id
                policy = authentik_proxy_expression.discord-auth-policy.id
                order  = 0
            }

            data "authentik_flow" "default-source-enrollment" {
                slug = "default-source-enrollment"
            }

            resource "authentik_policy_expression" "discord-enrollment-policy" {
                name       = "discord-enrollment-policy"
                expression = <<-PYTHON
                from authentik.core.models import Group
                GUILD_API_URL = "https://discord.com/api/users/@me/guilds/${var.guildId}/member"

                # Ensure flow is only run during OAuth logins via Discord
                if context["source"].provider_type != "discord":
                    return True

                # Get the user-source connection object from the context, and get the access token
                connection = context.get("goauthentik.io/sources/connection")
                if not connection:
                    return False
                access_token = connection.access_token

                guild_member_request = requests.get(
                    GUILD_API_URL,
                    headers={
                        "Authorization": f"Bearer {access_token}",
                    },
                )
                guild_member_info = guild_member_request.json()

                # Ensure we are not being ratelimited
                if guild_member_request.status_code == 429:
                    ak_message(f"Discord is throttling this connection. Retry in {int(guild_member_info['retry_after'])}s")
                    return False

                # Ensure user is a member of the guild
                if "code" in guild_member_info:
                    if guild_member_info["code"] == 10004:
                        ak_message("User is not a member of the guild '${var.guildName}'")
                    else:
                        ak_create_event("discord_error", source=context["source"], code=guild_member_info["code"])
                        ak_message("Discord API error, try again later.")
                    return False

                # Get all discord_groups
                discord_groups = Group.objects.filter(attributes__discord_role_id__isnull=False)

                # Filter matching roles based on guild_member_info['roles']
                user_groups_discord_updated = discord_groups.filter(attributes__discord_role_id__in=guild_member_info["roles"])

                # Set matchin_roles in flow context
                request.context["flow_plan"].context["groups"] = user_groups_discord_updated

                # Create event with roles added
                ak_create_event(
                    "discord_role_sync",
                    user_discord_roles_added=", ".join(str(group) for group in user_groups_discord_updated),
                )

                return True
                PYTHON
            }

            resource "authentik_policy_binding" "discord-enrollment-policy-binding" {
                target = authentik_flow.default-source-enrollment.id
                policy = authentik_proxy_expression.discord-enrollment-policy.id
                order  = 0
            }

            resource "authentik_source_oauth" "discord" {
                name                = "Discord"
                slug                = "discord"
                authentication_flow = data.authentik_flow.default-source-authentication.id
                enrollment_flow     = data.authentik_flow.default-source-enrollment.id

                provider_type     = "discord"
                consumer_key      = var.discordKey
                consumer_secret   = var.discordSecret
                additional_scopes = "guilds guilds.members.read"
            }

            resource "authentik_group" "discord-user" {
                name       = "Discord Users"
                attributes = jsonencode({
                    discord_role_id = var.userRoleId
                })
                users      = []
            }

            resource "authentik_group" "discord-sysop" {
                name       = "Discord Sysops"
                attributes = jsonencode({
                    discord_role_id = var.sysopRoleId
                })
                users      = []
            }

            variable "discordKey" {
                description = "The Discord OAuth2 client key for the application used by Authentik"
                type        = string
            }

            variable "discordSecret" {
                description = "The Discord OAuth2 client secret for the application used by Authentik"
                type        = string
            }

            variable "guildId" {
                description = "The Discord ID for the guild used by Authentik"
                type        = string
            }

            variable "guildName" {
                description = "The human-readable name of the guild used by Authentik"
                type        = string
            }

            variable "userRoleId" {
                description = "The Discord ID for the role representing ordinary users"
                type        = string
            }

            variable "sysopRoleId" {
                description = "The Discord ID for the role representing sysops"
                type        = string
            }
